var documenterSearchIndex = {"docs":
[{"location":"labs/PVLab/#PVLab","page":"PVLab","title":"PVLab","text":"","category":"section"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"tip: Tip\nDesigned By: HYEmail:云实验室网页链接如有错误，请批评指正。欢迎讨论交流。","category":"page"},{"location":"labs/PVLab/#设计原理","page":"PVLab","title":"设计原理","text":"","category":"section"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"太阳能电池的工作电路可以看作是把稳定的电流源和单向导通的二极管并联时的等效电路。","category":"page"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"(Image: 图一)","category":"page"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"单二极管模型需要确定五个模型参数：光电流Iph、串联电阻Rs、并联电阻Rsh以及两个二极管参数(饱和电流I0和理想系数n)。\n导入测得的实验数据：\n太阳能电池在不同工况下的电压\n不同电压下对应的电流","category":"page"},{"location":"labs/PVLab/#交互要素","page":"PVLab","title":"交互要素","text":"","category":"section"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"text1：以列表的形式输入电压数据\ntext2：以列表的形式输入电流数据\nbutton1：将电压电流数据传入后端\nbutton2：单二极管模型参数拟合\nplot：生成普通曲线图","category":"page"},{"location":"labs/PVLab/#操作说明","page":"PVLab","title":"操作说明","text":"","category":"section"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"导入实验数据后，先点击“DATA INPUT”，再点击“EXPORT FIG”","category":"page"},{"location":"labs/PVLab/#实验演示","page":"PVLab","title":"实验演示","text":"","category":"section"},{"location":"labs/PVLab/","page":"PVLab","title":"PVLab","text":"(Image: 图二)","category":"page"},{"location":"labs/TestLab/#TestLab","page":"TestLab","title":"TestLab","text":"","category":"section"},{"location":"labs/TestLab/","page":"TestLab","title":"TestLab","text":"tip: Tip\nDesigned By: YJYEmail:522432938@qq.com云实验室网页链接如有错误，请批评指正。欢迎讨论交流。","category":"page"},{"location":"labs/TestLab/#设计原理","page":"TestLab","title":"设计原理","text":"","category":"section"},{"location":"labs/TestLab/","page":"TestLab","title":"TestLab","text":"在同一画布里画出两种不同的函数。并将X轴的范围在有限时间内设置成逐帧变化。","category":"page"},{"location":"labs/TestLab/#交互要素","page":"TestLab","title":"交互要素","text":"","category":"section"},{"location":"labs/TestLab/","page":"TestLab","title":"TestLab","text":"row-1:\n滑动条：X轴范围\n滑动条：函数系数\n选择框：测试函数1\n选择框：测试函数2\nrow-2:\n按钮：仿真触发\n文本框：仿真次数记录\nrow-3\n绘图区：2系列普通曲线图","category":"page"},{"location":"labs/TestLab/#操作说明","page":"TestLab","title":"操作说明","text":"","category":"section"},{"location":"labs/TestLab/","page":"TestLab","title":"TestLab","text":"选择不同的交互要素，点击SIMULATION!开始仿真。","category":"page"},{"location":"labs/TestLab/#实验演示","page":"TestLab","title":"实验演示","text":"","category":"section"},{"location":"labs/TestLab/","page":"TestLab","title":"TestLab","text":"(Image: 图一)","category":"page"},{"location":"labs/HeatLab/#HeatLab","page":"HeatLab","title":"HeatLab","text":"","category":"section"},{"location":"labs/HeatLab/","page":"HeatLab","title":"HeatLab","text":"tip: Tip\nDesigned By: YJYEmail:522432938@qq.com云实验室网页链接如有错误，请批评指正。欢迎讨论交流。","category":"page"},{"location":"labs/HeatLab/#设计原理","page":"HeatLab","title":"设计原理","text":"","category":"section"},{"location":"labs/HeatLab/","page":"HeatLab","title":"HeatLab","text":"二维平板换热原理\n将平板离散成10*10的二维网格\n选择不同的：\n平板初始温度\n环境温度初值\n环境温度变化函数\n求解时间域\n环境温度变化函数中t的系数","category":"page"},{"location":"labs/HeatLab/#交互要素","page":"HeatLab","title":"交互要素","text":"","category":"section"},{"location":"labs/HeatLab/","page":"HeatLab","title":"HeatLab","text":"row-1:\n滑动条：平板初始温度\n滑动条：环境温度初值\n滑动条：环境温度变化函数中t的系数\n滑动条：求解时间域\n选择框：环境温度\nrow-2:\n按钮：仿真触发\n文本框：仿真次数记录\nrow-3\n绘图区：图显示画布——等高线图\n表格：显示平板仿真温度结果","category":"page"},{"location":"labs/HeatLab/#操作说明","page":"HeatLab","title":"操作说明","text":"","category":"section"},{"location":"labs/HeatLab/","page":"HeatLab","title":"HeatLab","text":"选择不同的交互要素，点击SIMULATION!开始仿真。","category":"page"},{"location":"labs/HeatLab/#实验演示","page":"HeatLab","title":"实验演示","text":"","category":"section"},{"location":"labs/HeatLab/","page":"HeatLab","title":"HeatLab","text":"(Image: 图一)","category":"page"},{"location":"tutorials/webdesign/#App设计教程","page":"App设计教程","title":"App设计教程","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"在Quick Start之后，相信大家已经看到了Web页面，本篇依旧以TestLab为例，进行设计方法说明。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"Stipple.jl用的是MVC框架，但是我们不涉及各种框架知识，有兴趣的同学自行查看。我们从实践的角度贯通实现APP的思想。","category":"page"},{"location":"tutorials/webdesign/#设计逻辑","page":"App设计教程","title":"设计逻辑","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"整个程序的运行逻辑图如图：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"(Image: 图 1)  ","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"在这个逻辑的基础上解决2个问题：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"在交互页面选择参数，参数需要被程序监听（也就是说如果参数改变了，程序需要及时检测到）\n被监听的参数传递到计算函数，函数计算出结果后页面展示结果。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"所以，细分可以得到如下的逻辑图：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"(Image: 图 5)  ","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"那么整体的程序设计思路就是紧紧围绕这个逻辑图来进行的。","category":"page"},{"location":"tutorials/webdesign/#代码剖析","page":"App设计教程","title":"代码剖析","text":"","category":"section"},{"location":"tutorials/webdesign/#参数“容器”","page":"App设计教程","title":"参数“容器”","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"所有的可变参数都放置在——mutable struct（可变参数结构体）中。这个结构体叫MyPage（名字任意取）。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"tip: Tip\n可变参数本质就是被监听的变量。结构体中的成员实际上是变量，本篇中叫参数或叫变量都指的是同一个意思。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"@reactive mutable struct MyPage <: ReactiveModel\n    # iris_data::R{DataTable} = DataTable(data)\n\n    value::R{Int} = 0\n    click::R{Int} = 0\n\n    features::R{Vector{Symbol}} = [:_sin, :cos, :log, :tanh]\n    f_left::R{Symbol} = :sin\n    f_right::R{Symbol} = :sin\n\n    plot_data::R{Vector{PlotData}} = []\n    layout::R{PlotLayout} = PlotLayout(plot_bgcolor=\"#fff\")\n\n    x_limit::R{Int} = 3\n    paramenter::R{Float32} = 1.2\nend","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"其中，用户决定的参数有：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"x_limit 对应 X轴范围\nparamenter对应 函数系数\nf_left对应 测试函数1\nf_right对应 测试函数2\nvalue、click 对应 SIMULATION按钮","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"储存计算的结果有：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"plot_data 对应 动图","category":"page"},{"location":"tutorials/webdesign/#生成页面函数——UI","page":"App设计教程","title":"生成页面函数——UI","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"function ui(model::MyApp.MyPage)\n\n    onany(model.value) do (_...)\n        model.click[] += 1\n        compute_data(model)\n    end\n\n    page(model, class=\"container\", title=\"Ai4Lab\",\n        head_content=Genie.Assets.favicon_support(),\n        prepend=style(\n            \"\"\"\n            tr:nth-child(even) {\n              background: #F8F8F8 !important;\n            }\n\n            .modebar {\n              display: none!important;\n            }\n\n            .st-module {\n              marign: 10px;\n              background-color: #FFF;\n              border-radius: 5px;\n              box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.04);\n            }\n\n            .stipple-core .st-module > h5,\n            .stipple-core .st-module > h6 {\n              border-bottom: 0px !important;\n            }\n            \"\"\"\n        ),\n        [\n            heading(\"测试\")\n            row([\n                cell(\n                    class=\"st-module\",\n                    [\n                        h6(\"X轴范围\")\n                        slider(1:1:20,\n                            @data(:x_limit);\n                            label=true)\n                    ]\n                )\n                cell(\n                    class=\"st-module\",\n                    [\n                        h6(\"函数系数\")\n                        slider(1:0.1:2,\n                            @data(:paramenter);\n                            label=true)\n                    ]\n                )\n                cell(\n                    class=\"st-module\",\n                    [\n                        h6(\"测试函数1\")\n                        Stipple.select(:f_left; options=:features)\n                    ]\n                )\n                cell(\n                    class=\"st-module\",\n                    [\n                        h6(\"测试函数2\")\n                        Stipple.select(:f_right; options=:features)\n                    ]\n                )])\n            row([\n                cell(\n                    class=\"st-module\",\n                    p([\n                        \"Simulation Times: \"\n                        span(model.click, @text(:click))\n                    ])\n                )\n                btn(\"Simulation!\", color=\"primary\", textcolor=\"black\", @click(\"value += 1\"), [\n                    tooltip(contentclass=\"bg-indigo\", contentstyle=\"font-size: 16px\",\n                        style=\"offset: 10px 10px\", \"点击按钮开始仿真!\")])\n                cell(\n                    class=\"st-module\",\n                    p([\n                        \"Simulation Times: \"\n                        span(model.click, @text(:click))\n                    ])\n                )])\n            row([\n                cell(\n                    class=\"st-module\",\n                    [\n                        h5(\"仿真结果：\")\n                        plot(:plot_data, layout=:layout, config=\"{ displayLogo:false }\")\n                    ]\n                )\n            ])\n        ]\n    )\nend\n","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"ui函数中有两个重要的部分：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"触发——onany\nhtml页面——page","category":"page"},{"location":"tutorials/webdesign/#触发","page":"App设计教程","title":"触发","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"对于触发而言，onany(model.value)表示监听参数容器中value的值，如果这个值改变了，就进行系列计算。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"note: Note\n思考：如果同时监听x_limit、paramenter、f_left、f_right、value会有什么结果。","category":"page"},{"location":"tutorials/webdesign/#page页面划分","page":"App设计教程","title":"page页面划分","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"对于页面而言，描述了整个html页面的结构。以及对应的参数绑定。 page中有row和cell，他们的关系如下：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"(Image: 图 6)  ","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"整个页面分为3个row，每个row里面可以分出cell。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"可以向row与cell传递一些特性参数，例如size等，这些需要查阅官方文档的API。或者从代码示例中查看一些可能的用法，因为开发者本身的文档也不是很完善。","category":"page"},{"location":"tutorials/webdesign/#page中值绑定","page":"App设计教程","title":"page中值绑定","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"cell中，类似：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"# 滑动条\nslider(1:0.1:2,@data(:paramenter);label=true)\n# 选择框\nStipple.select(:f_right; options=:features)","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"它们将页面与参数容器中的变量绑定在一起了。这种绑定中自动包含监听。也就是说用户只要拖动滑动条，那么它绑定的相应值就被记录下来了。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"warning: Warning\n记录不等于触发，只有onany()中的变量改变了才会触发。 换一句话说，页面中绑定的值随时都在被监听，只要改变了都被记录下来。但是触发与否，哪些值触发，由onany()决定。 即，监听是自动完成的，触发是人为决定的。","category":"page"},{"location":"tutorials/webdesign/#计算函数","page":"App设计教程","title":"计算函数","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"pd(f, para, xlim, name) = PlotData(\n    x=Float64[i for i in 1:0.1:xlim],\n    y=Float64[para * f(i) for i in 1:0.1:xlim],\n    plot=StipplePlotly.Charts.PLOT_TYPE_SCATTER,\n    name=name,\n)\nfunction compute_data(ic_model::MyApp.MyPage)\n    f_left = isequal(ic_model.f_left[], nothing) ? sin : eval(ic_model.f_left[])\n    f_right = isequal(ic_model.f_right[], nothing) ? sin : eval(ic_model.f_right[])\n    xlim = ic_model.x_limit[]\n    para = ic_model.paramenter[]\n    for i in 0:30\n        ic_model.plot_data[] = [pd(f_left, para, xlim + i, \"测试函数1\"), pd(f_right, para, xlim + i, \"测试函数2\")]\n        sleep(1 / 30)\n    end\n    nothing\nend","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"计算函数就干了一个活，触发以后，根据传回来的“用户决定的值”计算出相应的结果，并回传。那么就有两个问题：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"什么叫“根据传回来的参数”？\n“回传”是怎么个“回传”法？","category":"page"},{"location":"tutorials/webdesign/#结构体中可变参数调用","page":"App设计教程","title":"结构体中可变参数调用","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"第一个问题的本质是——调用！因为前面已经说了。任何改变都会被监听并自动记录。被触发需要计算的时候，调用这些被记录的值不就可以了吗？事实上的确如此：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"xlim = ic_model.x_limit[]\npara = ic_model.paramenter[]","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"例如，这两个做法就是直接调用参数容器里的参数值","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"warning: Warning\n参数容器里的参数值调用时需要带上[]，例如：ic_model.x_limit[]否则报错！","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"随后，调用了函数pd()。函数pd返回的是一个结构体，这个结构体叫PlotData。PlotData是非常重要的一个结构体。因为这是Web程序，画图不会直接画，而是需要把画图的数据存下来，生成相关的css和js文件，再在浏览器中显示。所以需要PlotData这样一个中间体来存储画图的数据。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"note: Note\n对于Web程序来说，最终目的是展示结果。也可以说，生成这个PlotData是触发函数计算最终的目的。当然，也有存在其他的展示形式，如表格等等。本质上是一样的。","category":"page"},{"location":"tutorials/webdesign/#参数回传","page":"App设计教程","title":"参数回传","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"第二个问题的本质是——赋值！把计算出来的PlotData结果赋值给参数容器中的plot_data，实现传递。随后它就在与之绑定的页面区域中显示出来。也就是说，页面的监听是双向的。用户通过滑动条改变参数“容器”参数是可以的，后台计算程序改变参数“容器”参数也是可以的。无论哪一方改变了，都没有问题，页面都会做出相应的改变。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"例如：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":" for i in 0:30\n     ic_model.plot_data[] = [pd(f_left, para, xlim + i, \"测试函数1\"), pd(f_right, para, xlim + i, \"测试函数2\")]\n     sleep(1 / 30)\n end","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"这里通过for循环，连续得到30个PlotData并赋值给plot_data[]，只要赋值了，页面就会显示。此外，中间休息frac130秒。这不就是动画的原理吗？","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"warning: Warning\n参数容器里的参数值被赋值时需要带上[]，例如：ic_model.plot_data[]否则报错！","category":"page"},{"location":"tutorials/webdesign/#总结","page":"App设计教程","title":"总结","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"与逻辑图不同的是，程序的框架如下：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"(Image: 图 7)  ","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"如果仔细思考可以发现，最关的键其实是我们的可变结构体：","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"@reactive mutable struct MyPage <: ReactiveModel","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"这个结构体是整个App交互的一个桥梁。交互时发生的变化，全部体现在这里面的参数（变量）的变化上。当需要设计一个App时，考虑交互的动态参数，其实就是在设计这个结构体的成员。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"只要产生交互，就要设计变量放入“参数容器”中。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"例如，本例中的两个滑杆，两个选择框，一个按钮。以及画图区域。这些是交互的组件，那么就要设计相应的变量来“承载交互”。","category":"page"},{"location":"tutorials/webdesign/#建议","page":"App设计教程","title":"建议","text":"","category":"section"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"本篇贯穿了App设计的理念。但对于一些细节不可能面面俱到。不太明白的话，对着代码看效果，努力思考为什么这么写能行。还有一些细节上的疑问，可以通过改动代码看页面的变化来琢磨它的机制。从实践中体会，这是理解最快的方式。同时积极参照官方文档及API。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"从教程调试建议中看一看，学习方法。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"可以多多思考，为什么这么写能行；如果要实现XXX，应该要怎么做；那么做能不能实现等等。","category":"page"},{"location":"tutorials/webdesign/","page":"App设计教程","title":"App设计教程","text":"发挥想象力，带着问题去探索实践，慢慢地，就悟了!💪💪💪","category":"page"},{"location":"#Ai4ELab","page":"Home","title":"Ai4ELab","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: 图 4)  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nClick To Introduction to smart energy systemOptControl.jl\nAi4EDocs\nAi4EComponentLib.jl","category":"page"},{"location":"#Introduction-of-Ai4ELab","page":"Home","title":"Introduction of Ai4ELab","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ai4ELab is a Virtual Simulation Lab of Ai4Energy。it's：","category":"page"},{"location":"","page":"Home","title":"Home","text":"Based on framework of Geine.jl and Stipple.jl\nSupported by Ecosystem of SciML and other powerful Julia packages.\nDeployed with Docker","category":"page"},{"location":"","page":"Home","title":"Home","text":"Try some experiments in Ai4ELab, Try some experiments in Ai4ELab, you will see a powerful ecosystem!","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ai4ELab is open source and includes examples and basic tutorials. Just try and do some cool things with your imagination and creativity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to contribute your Apps.","category":"page"},{"location":"#Preparation","page":"Home","title":"Preparation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia\nMirror for PkgSever(更换国内镜像)\nInstall VScode and plug-in\nLearn how to pull request.","category":"page"},{"location":"tutorials/quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"在开始之前，让我们先学会如何在本地运行程序。先把程序跑起来！","category":"page"},{"location":"tutorials/quickstart/#文件结构介绍","page":"Quick Start","title":"文件结构介绍","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"以TestLab文件夹为例介绍文件结构，文件夹结构如下：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"TestLab/\n├── lib/\n│   └── MyApp.jl\n├── public/\n│   └── favicon.ico\n├── Dockerfile\n├── Project.toml\n└── run.jl","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"lib/包含了网页的主要设计部分，是核心\npublic/包含了Ai4E的图标，不改动\nDockerfile是docker的部署文件，不改动\nProject.toml是项目的包依赖信息文件，需要部分手动改动，后面介绍\nrun.jl是App的启动文件，一般来说不改动","category":"page"},{"location":"tutorials/quickstart/#启动方法","page":"Quick Start","title":"启动方法","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"运行本地程序的本质是在本地启动Web服务器。本地启动服务，那么自己的电脑就作为了个服务器，自己服务自己。","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"具体步骤有2步：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Step1：在该App文件夹内打开终端（Powershell或VScode）\nStep2：进入Julia，环境切换到该文件夹，并启动服务。","category":"page"},{"location":"tutorials/quickstart/#Step1","page":"Quick Start","title":"Step1","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"在项目文件夹，右键选择PowerShell或VScode。这两种形式本质上相同，VScode中只是将PowerShell嵌入了而已。","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"个人习惯用VScode，因为编辑程序也可以在VScode里进行，后面就不用来回切换了。","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: 图)","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"tip: Tip\n如果在VScode中不见终端，在窗口上方操作栏的终端里新建终端或右边第二个按钮调出终端面板。(Image: 图 1)  如果没有PowerShell，微软商店里下载：(Image: 图 2)  ","category":"page"},{"location":"tutorials/quickstart/#Step2","page":"Quick Start","title":"Step2","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Step2的具体步骤如下，有两种方法：","category":"page"},{"location":"tutorials/quickstart/#方法1","page":"Quick Start","title":"方法1","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"TestLab> julia #进入Julia\njulia> #按下 ] 键进入包模式\n(@v1.x) pkg> activate .\n(TestLab) pkg> instantiate\n(TestLab) pkg> #按下 回退<backspace> 键退出包模式 \njulia> include(\"run.jl\") #开启服务器","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"注意activate后面的点，意思是激活当前文件夹的环境。能激活的原因是存在Project.toml。\ninstantiate是实例化环境的意思，就是在当前环境下把Project.toml中的包以及他们的包部署到位。","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"tip: Tip\n上述过程中，按下Tab键可以自动补全代码。 同时，上述步骤中有多此一举的做法，这个留给大家自己去思考发现","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"示意图如下：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: 图 4)","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"最后就启动了服务器了，按下Ctrl键点击http链接，就能在网页中看到了本地运行的Web程序了！（Warning可以不用管）","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: 图 1)","category":"page"},{"location":"tutorials/quickstart/#方法2","page":"Quick Start","title":"方法2","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"方法二很简单，在Step1的基础上：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"确认是否在App项目文件夹\n打开run.jl文件\n点箭头运行","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"如图所示：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: 图 2)  ","category":"page"},{"location":"tutorials/quickstart/#关闭服务器","page":"Quick Start","title":"关闭服务器","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"如果需要关闭服务器，那么输入：","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"julia> down()","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: 图 2)  ","category":"page"},{"location":"tutorials/styleAndRules/#App开发规范与建议","page":"App开发规范与建议","title":"App开发规范与建议","text":"","category":"section"},{"location":"tutorials/styleAndRules/#开发环境","page":"App开发规范与建议","title":"开发环境","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"warning: Warning\n开发环境可以建立在tests/或其他文件夹中。尝试labs/中例子也不要对里面的项目直接修改。最好把它复制出来，tests/或其他文件夹中。规避无法撤回的风险。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"建立Julia环境的方法是创建Project.toml文件\n把Julia环境切换到当前文件夹，即","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"TestLab> julia #进入Julia\njulia> #按下 ] 键进入包模式\n(@v1.x) pkg> activate .","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"或者按照Quick Start中的方法2，直接通过VScode运行也可以。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"若要添加依赖包，使用add，那么在Project.toml文件中自动生成[deps]。所以这个文件中的[deps]，不用自己写。\n按下面的方式使用instantiate，instantiate实际上就是根据Project.toml的内容把相应的包拉取到当前环境。Manifest.toml是在实例化环境时生成的。Quick Start中的方法2把上述过程写在了Julia脚本中，自动完成。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"(TestLab) pkg> instantiate","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"需要自己写的是[compat]，这是兼容的意思。就是说明你的环境用的包版本是多少，为了避免因为包版本更新而产生错误。在包模式下输入status可以查看包版本。在本地App设计调试完成以后，把版本兼容手动写上去即可。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"note: Note\n更多信息可以查看Pkg.jl","category":"page"},{"location":"tutorials/styleAndRules/#App文件结构","page":"App开发规范与建议","title":"App文件结构","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"文件结构做如下统一：","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"XXX/\nTestLab/\n├── lib/\n│   └── MyApp.jl\n├── public/\n│   └── favicon.ico\n├── Dockerfile\n├── Project.toml\n└── run.jl","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"XXX为项目文件名，如TestLab与HeatLab。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"这样的结构能够通过Docker直接部署。","category":"page"},{"location":"tutorials/styleAndRules/#文件内容","page":"App开发规范与建议","title":"文件内容","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"这部分主要看各位的理解程度，如果把Stipple实属玩明白了，随意发挥。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"如果不太明白，仅修改部分内容也能够很好地实现App。","category":"page"},{"location":"tutorials/styleAndRules/#快速上手版","page":"App开发规范与建议","title":"快速上手版","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"仅修改lib/MyApp.jl中函数ui与结构体MyPage里面的内容，这二者名字也不改动。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"其他计算函数如compute_data、pd等按需修改。","category":"page"},{"location":"tutorials/styleAndRules/#高端精通版","page":"App开发规范与建议","title":"高端精通版","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"唯一的要求：能用Docker部署。🤣🤣🤣","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"warning: Warning\nMyApp.jl中使用了MyApp模块中的MyPage结构体与ui函数。模块化封装的作用是为了可以重定义MyPage。这是为了适配Revise.jl，目的就是为了实时同步代码更新。即网页运行时，直接修改代码，浏览器刷新一下就能看到代码刷新后页面的效果。但是如果修改了MyPage结构体，这个时候大概率还是得先down()再重新启动一下，这和页面渲染有关。如果碰到了问题，解决不了。就用那个经典的方法——重开Julia。🤣🤣🤣run.jl，MyApp.jl中的内容相关联，如果改动了MyApp.jl中的模块名和结构体名，需要做对应的关联，否则报错。","category":"page"},{"location":"tutorials/styleAndRules/#StippleUI与StipplePlotly","page":"App开发规范与建议","title":"StippleUI与StipplePlotly","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"这两个相关的内容是需要查阅文档的。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"关于StippleUI。在例子里只用了滑杆(slider)与选择框(select)，还有很多有意思的UI组件在文档API中。大家可以自行查看。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"关于StipplePlotly。画图时，支持各种图。Web画图主要是用PlotlyJS，StipplePlotly作为中间层，最终会把前面提到的PlotData的内容生成对应的CSS与JS文件。那么可以说，最终的目的是画PlotlyJS的图。所以有些API需要去PlotlyJS的官方文档找，例如HeatLab中PlotData里的","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"contours=Dict(\"start\" => 0, \"end\" => 1000)","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"只有看官方文档才能写出来的。记住：PlotData是中间层，用来储存信息。PlotlyJS是最终目的。","category":"page"},{"location":"tutorials/styleAndRules/#App介绍文档","page":"App开发规范与建议","title":"App介绍文档","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"Ai4ELab的文件结构为：","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"Ai4ELab/\n├── docs/\n│   ├── src/\n│   │   ├──labs/\n│   │   │  ├──HeatLab.md\n│   │   │  └──...\n│   │   └── ...\n│   └── ...\n├── labs/\n│   └── ...\n├── .github\n├── .gitignore\n├── LICENSE\n└── README.md","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"在Ai4ELab/labs中建立App代码文件夹\n在Ai4ELab/docs/src/labs中建立自己的App介绍文档。文档模板参考TestLab与HeatLab。把模板中的几大要点确定了，基本上App的框架设计也就完成了。","category":"page"},{"location":"tutorials/styleAndRules/#调试建议与感悟","page":"App开发规范与建议","title":"调试建议与感悟","text":"","category":"section"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"不会不要紧，若有解决问题的信心，没有解决不了的问题。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"实践之路这样的：","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"对照着页面看看代码\n有些理解了，根据理解做一些改动代码改动\n看看改动和效果和预期是否一致\n重复1-3，然后——小悟了！\n想象你期望的实现\n重复1-3，探索实现的方法\n在想象与现实之间多次挣扎，在Bug和撤回之间反复横跳\n在1-3的路上继续坚持，然后——大悟了！","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"实践理论再实践的马克思哲学原理不就用上了吗？👍","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"个人感悟，想清楚了这几个问题，就悟了：","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"这一行代码（一段代码、一个函数、一个文件）完成了什么任务\n为什么要这么写，有没有什么道理（可能有也可能没有，如果能判断它为无关紧要的部分，那理解认识也就到位了）\n为什么他的可以跑，我的不行\n根据现有的机制，我想要实现我的想法的路径是什么","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"至此，App的教程到此就告一段落了。这些感悟与认识也是在写TestPage与HeatLab实践中得来的。在App设计与实践中依然会有很多没有遇到过的困难，这是必然的。站在巨人的肩膀上，再向前探索，解决一个又一个问题，也是一种乐趣。想象、实践到实现的创造过程，是人类特有的高级趣味，希望大家在实践中都能够有所体会。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"此外，成为开发者很难吗？不难。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"HeatLab已经并入了Stipple的高级示例库（AdvanceExample）。所以大家都能成为开发者。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"(Image: 图 1)  ","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"日拱一卒，期望在Ai4ELab与StippleDemos看到大家的Pull Request。","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"Whether amazing work or not, thanks for your contribution! Just do it!","category":"page"},{"location":"tutorials/styleAndRules/","page":"App开发规范与建议","title":"App开发规范与建议","text":"tip: Tip\n有部署需要（汇报、展示、答辩等等）的同学，提前告知。App可以直接部署在组里的云服务器上。👍👍","category":"page"}]
}
